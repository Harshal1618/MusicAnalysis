#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 20 18:40:42 2018

@author: harshal
"""

import matplotlib.pyplot as plt
from scipy.fftpack import fft
from scipy.io import wavfile # get the api
import numpy as np

fs, data = wavfile.read('/Volumes/DataSci/Data/HSCode/MusicAnalysis/Flute.nonvib.ff.A4.stereo.wav') # load the data
a = data.T[0] # this is a two channel soundtrack, I get the first track
b=[(ele/2**8.)*2-1 for ele in a] # this is 8-bit track, b is now normalized on [-1,1)
c = fft(b) # calculate fourier transform (complex numbers list)
d = int(len(c)/2)  # you only need half of the fft list (real signal symmetry)
plt.plot(abs(c[:(d-1)]),'r') 
plt.show()

# Number of samplepoints
N = 600
# sample spacing
T = 1.0 / 800.0
x = np.linspace(0.0, N*T, N)
y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)
yf = fft(y)
xf = np.linspace(0.0, 1.0/(2.0*T), N/2)

fig, ax = plt.subplots()
ax.plot(xf, 2.0/N * np.abs(yf[:N//2]))
plt.show()


## HS code
N = 100 # No of samples
T = 1.0 / 100.0 # Time between samples

freq1 = 3
freq2 = 5

x = np.linspace(0,N*T,N+1)
y = np.sin(2*np.pi*freq1*x) + np.sin(2*np.pi*freq2*x)
plt.plot(x,y)

f = fft(y)

xf = np.linspace(0,1.0 / (2.0*T),(N//2)+1)
yf = np.abs(f[:(N//2)+1])

plt.plot(xf,yf)

top3_yf = np.argsort(yf)[-3:][::-1]